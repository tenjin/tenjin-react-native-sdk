/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeTenjinCxxSpecJSI : public TurboModule {
protected:
  NativeTenjinCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual void initialize(jsi::Runtime &rt, jsi::String apiKey) = 0;
  virtual void connect(jsi::Runtime &rt) = 0;
  virtual void optIn(jsi::Runtime &rt) = 0;
  virtual void optOut(jsi::Runtime &rt) = 0;
  virtual void optInParams(jsi::Runtime &rt, jsi::Array params) = 0;
  virtual void optOutParams(jsi::Runtime &rt, jsi::Array params) = 0;
  virtual void optInOutUsingCMP(jsi::Runtime &rt) = 0;
  virtual void optOutGoogleDMA(jsi::Runtime &rt) = 0;
  virtual void optInGoogleDMA(jsi::Runtime &rt) = 0;
  virtual void setAppStore(jsi::Runtime &rt, jsi::String type) = 0;
  virtual void transaction(jsi::Runtime &rt, jsi::String productName, jsi::String currencyCode, double quantity, double unitPrice) = 0;
  virtual void transactionWithReceipt(jsi::Runtime &rt, jsi::String productName, jsi::String currencyCode, double quantity, double unitPrice, jsi::String transaction, jsi::String data) = 0;
  virtual void eventWithName(jsi::Runtime &rt, jsi::String name) = 0;
  virtual void eventWithNameAndValue(jsi::Runtime &rt, jsi::String name, jsi::String value) = 0;
  virtual void appendAppSubversion(jsi::Runtime &rt, double version) = 0;
  virtual void updatePostbackConversionValue(jsi::Runtime &rt, double conversionValue) = 0;
  virtual void updatePostbackConversionValueWithCoarseValue(jsi::Runtime &rt, double conversionValue, jsi::String coarseValue) = 0;
  virtual void updatePostbackConversionValueWithCoarseValueAndLockWindow(jsi::Runtime &rt, double conversionValue, jsi::String coarseValue, bool lockWindow) = 0;
  virtual void getAttributionInfo(jsi::Runtime &rt, jsi::Function successCallback, jsi::Function errorCallback) = 0;
  virtual void eventAdImpressionAdMob(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual void eventAdImpressionAppLovin(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual void eventAdImpressionHyperBid(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual void eventAdImpressionIronSource(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual void eventAdImpressionTopOn(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual void eventAdImpressionTradPlus(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual void setCustomerUserId(jsi::Runtime &rt, jsi::String userId) = 0;
  virtual void getCustomerUserId(jsi::Runtime &rt, jsi::Function callback) = 0;
  virtual void getAnalyticsInstallationId(jsi::Runtime &rt, jsi::Function callback) = 0;
  virtual void setGoogleDMAParameters(jsi::Runtime &rt, bool adPersonalization, bool adUserData) = 0;

};

template <typename T>
class JSI_EXPORT NativeTenjinCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "Tenjin";

protected:
  NativeTenjinCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTenjinCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeTenjinCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTenjinCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    void initialize(jsi::Runtime &rt, jsi::String apiKey) override {
      static_assert(
          bridging::getParameterCount(&T::initialize) == 2,
          "Expected initialize(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::initialize, jsInvoker_, instance_, std::move(apiKey));
    }
    void connect(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::connect) == 1,
          "Expected connect(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::connect, jsInvoker_, instance_);
    }
    void optIn(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::optIn) == 1,
          "Expected optIn(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optIn, jsInvoker_, instance_);
    }
    void optOut(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::optOut) == 1,
          "Expected optOut(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optOut, jsInvoker_, instance_);
    }
    void optInParams(jsi::Runtime &rt, jsi::Array params) override {
      static_assert(
          bridging::getParameterCount(&T::optInParams) == 2,
          "Expected optInParams(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optInParams, jsInvoker_, instance_, std::move(params));
    }
    void optOutParams(jsi::Runtime &rt, jsi::Array params) override {
      static_assert(
          bridging::getParameterCount(&T::optOutParams) == 2,
          "Expected optOutParams(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optOutParams, jsInvoker_, instance_, std::move(params));
    }
    void optInOutUsingCMP(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::optInOutUsingCMP) == 1,
          "Expected optInOutUsingCMP(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optInOutUsingCMP, jsInvoker_, instance_);
    }
    void optOutGoogleDMA(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::optOutGoogleDMA) == 1,
          "Expected optOutGoogleDMA(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optOutGoogleDMA, jsInvoker_, instance_);
    }
    void optInGoogleDMA(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::optInGoogleDMA) == 1,
          "Expected optInGoogleDMA(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::optInGoogleDMA, jsInvoker_, instance_);
    }
    void setAppStore(jsi::Runtime &rt, jsi::String type) override {
      static_assert(
          bridging::getParameterCount(&T::setAppStore) == 2,
          "Expected setAppStore(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setAppStore, jsInvoker_, instance_, std::move(type));
    }
    void transaction(jsi::Runtime &rt, jsi::String productName, jsi::String currencyCode, double quantity, double unitPrice) override {
      static_assert(
          bridging::getParameterCount(&T::transaction) == 5,
          "Expected transaction(...) to have 5 parameters");

      return bridging::callFromJs<void>(
          rt, &T::transaction, jsInvoker_, instance_, std::move(productName), std::move(currencyCode), std::move(quantity), std::move(unitPrice));
    }
    void transactionWithReceipt(jsi::Runtime &rt, jsi::String productName, jsi::String currencyCode, double quantity, double unitPrice, jsi::String transaction, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::transactionWithReceipt) == 7,
          "Expected transactionWithReceipt(...) to have 7 parameters");

      return bridging::callFromJs<void>(
          rt, &T::transactionWithReceipt, jsInvoker_, instance_, std::move(productName), std::move(currencyCode), std::move(quantity), std::move(unitPrice), std::move(transaction), std::move(data));
    }
    void eventWithName(jsi::Runtime &rt, jsi::String name) override {
      static_assert(
          bridging::getParameterCount(&T::eventWithName) == 2,
          "Expected eventWithName(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventWithName, jsInvoker_, instance_, std::move(name));
    }
    void eventWithNameAndValue(jsi::Runtime &rt, jsi::String name, jsi::String value) override {
      static_assert(
          bridging::getParameterCount(&T::eventWithNameAndValue) == 3,
          "Expected eventWithNameAndValue(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventWithNameAndValue, jsInvoker_, instance_, std::move(name), std::move(value));
    }
    void appendAppSubversion(jsi::Runtime &rt, double version) override {
      static_assert(
          bridging::getParameterCount(&T::appendAppSubversion) == 2,
          "Expected appendAppSubversion(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::appendAppSubversion, jsInvoker_, instance_, std::move(version));
    }
    void updatePostbackConversionValue(jsi::Runtime &rt, double conversionValue) override {
      static_assert(
          bridging::getParameterCount(&T::updatePostbackConversionValue) == 2,
          "Expected updatePostbackConversionValue(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::updatePostbackConversionValue, jsInvoker_, instance_, std::move(conversionValue));
    }
    void updatePostbackConversionValueWithCoarseValue(jsi::Runtime &rt, double conversionValue, jsi::String coarseValue) override {
      static_assert(
          bridging::getParameterCount(&T::updatePostbackConversionValueWithCoarseValue) == 3,
          "Expected updatePostbackConversionValueWithCoarseValue(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::updatePostbackConversionValueWithCoarseValue, jsInvoker_, instance_, std::move(conversionValue), std::move(coarseValue));
    }
    void updatePostbackConversionValueWithCoarseValueAndLockWindow(jsi::Runtime &rt, double conversionValue, jsi::String coarseValue, bool lockWindow) override {
      static_assert(
          bridging::getParameterCount(&T::updatePostbackConversionValueWithCoarseValueAndLockWindow) == 4,
          "Expected updatePostbackConversionValueWithCoarseValueAndLockWindow(...) to have 4 parameters");

      return bridging::callFromJs<void>(
          rt, &T::updatePostbackConversionValueWithCoarseValueAndLockWindow, jsInvoker_, instance_, std::move(conversionValue), std::move(coarseValue), std::move(lockWindow));
    }
    void getAttributionInfo(jsi::Runtime &rt, jsi::Function successCallback, jsi::Function errorCallback) override {
      static_assert(
          bridging::getParameterCount(&T::getAttributionInfo) == 3,
          "Expected getAttributionInfo(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getAttributionInfo, jsInvoker_, instance_, std::move(successCallback), std::move(errorCallback));
    }
    void eventAdImpressionAdMob(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::eventAdImpressionAdMob) == 2,
          "Expected eventAdImpressionAdMob(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventAdImpressionAdMob, jsInvoker_, instance_, std::move(json));
    }
    void eventAdImpressionAppLovin(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::eventAdImpressionAppLovin) == 2,
          "Expected eventAdImpressionAppLovin(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventAdImpressionAppLovin, jsInvoker_, instance_, std::move(json));
    }
    void eventAdImpressionHyperBid(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::eventAdImpressionHyperBid) == 2,
          "Expected eventAdImpressionHyperBid(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventAdImpressionHyperBid, jsInvoker_, instance_, std::move(json));
    }
    void eventAdImpressionIronSource(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::eventAdImpressionIronSource) == 2,
          "Expected eventAdImpressionIronSource(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventAdImpressionIronSource, jsInvoker_, instance_, std::move(json));
    }
    void eventAdImpressionTopOn(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::eventAdImpressionTopOn) == 2,
          "Expected eventAdImpressionTopOn(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventAdImpressionTopOn, jsInvoker_, instance_, std::move(json));
    }
    void eventAdImpressionTradPlus(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::eventAdImpressionTradPlus) == 2,
          "Expected eventAdImpressionTradPlus(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::eventAdImpressionTradPlus, jsInvoker_, instance_, std::move(json));
    }
    void setCustomerUserId(jsi::Runtime &rt, jsi::String userId) override {
      static_assert(
          bridging::getParameterCount(&T::setCustomerUserId) == 2,
          "Expected setCustomerUserId(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setCustomerUserId, jsInvoker_, instance_, std::move(userId));
    }
    void getCustomerUserId(jsi::Runtime &rt, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::getCustomerUserId) == 2,
          "Expected getCustomerUserId(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getCustomerUserId, jsInvoker_, instance_, std::move(callback));
    }
    void getAnalyticsInstallationId(jsi::Runtime &rt, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::getAnalyticsInstallationId) == 2,
          "Expected getAnalyticsInstallationId(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getAnalyticsInstallationId, jsInvoker_, instance_, std::move(callback));
    }
    void setGoogleDMAParameters(jsi::Runtime &rt, bool adPersonalization, bool adUserData) override {
      static_assert(
          bridging::getParameterCount(&T::setGoogleDMAParameters) == 3,
          "Expected setGoogleDMAParameters(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setGoogleDMAParameters, jsInvoker_, instance_, std::move(adPersonalization), std::move(adUserData));
    }

  private:
    friend class NativeTenjinCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
